generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ContentType {
  movie
  tv
}

enum RequestStatus {
  pending
  accepted
  rejected
}

model User {
  user_id    Int            @id @default(autoincrement())
  username   String         @db.VarChar(50)
  email      String         @unique @db.VarChar(100)
  password   String         @db.VarChar(255)
  created_at DateTime       @default(now()) @db.Timestamp(0)
  Content    Content[]
  Person     Person[]
  requester  Relationship[] @relation("requesterRelation")
  receiver   Relationship[] @relation("receiverRelation")
  Watchlist  Watchlist[]

  @@map("user")
}

model Content {
  user_id      Int
  content_id   Int
  content_type ContentType
  rating       Int?
  review       String?     @db.VarChar(400)
  created_at   DateTime    @default(now()) 

  user User @relation(fields: [user_id], references: [user_id])

  @@id([user_id, content_id, content_type])
  @@map("content")
}

model ContentGenre {
  id   Int    @id
  name String

  @@map("content_genre")
}

model Watchlist {
  user_id      Int
  content_id   Int
  content_type ContentType
  created_at   DateTime    @default(now())

  user User @relation(fields: [user_id], references: [user_id])

  @@id([user_id, content_id, content_type])
  @@map("watchlist")
}

model Person {
  person_id Int
  user_id   Int

  user User @relation(fields: [user_id], references: [user_id])

  @@id([person_id, user_id])
  @@map("person")
}

model Relationship {
  requester_id Int
  receiver_id  Int
  status       RequestStatus
  requested_at DateTime      @default(now())
  responded_at DateTime?

  requester User @relation("requesterRelation", fields: [requester_id], references: [user_id])
  receiver  User @relation("receiverRelation", fields: [receiver_id], references: [user_id])

  @@id([requester_id, receiver_id])
  @@map("relationships")
}
